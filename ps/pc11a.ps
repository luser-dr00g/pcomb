%errordict/rangecheck{pstack countexecstack array execstack == quit}put
%errordict/typecheck{pstack countexecstack array execstack == quit}put
(struct2.ps)run {

    lazy{ p }{
      ({dup zero ne 1 index xcheck and {
         { force //p exec } curry
       }//p  ifelse}) cvx exec } @func
    lazy-input{ fetch remainder recurse }{
      ({ //fetch exec { zero }{ [ exch [ r c ] ]
                                dup first (\n) eq {r c add 0}{r c 1 add} ifelse
                                //remainder exec 3 aa cvx //recurse compose cons } ifelse
      }) cvx exec func } @func
} pairs-begin {

    % row col str -> ( [s0 [r c]] {[s1 [r1 c1]] ... })
    string-input{r c s} { s {head} stopped {pop pop pop true}{false} ifelse }
      { s rest } { string-input } @lazy-input
    file-input{r c f} { f read not } { f } { file-input } @lazy-input

    succeed { { exch consok } curry } % inp v succeed exec = [OK [v inp]]
    fail { { exch cons /Fail exch cons } curry }        % inp fail exec = [Fail msg]
    nofail{ p }{ { /p exec +not-ok { dup 0 /Error put } if } ll } @func
    report { dup first =
             dup first /OK eq { second dup first === (remainder:) =only second == }
                              { second == } ifelse }
    return{ v }{ { pop /v } ll using } @func
    using{ p f }{ { /p exec +is-ok { next xs-x /f exec exch consok } if } ll } @func
    probe{ p }{ { /p exec dup report } ll } @func

    satisfy{ pred }{
      { dup zero eq {(empty input) fail}{
	  dup forcex first first /pred exec { xs-x first one succeed }
                                            { [ /pred (not satisfied) ] fail } ifelse
        } ifelse exec } ll } @func
    literal { {eq} curry satisfy }
    range{ a b }{ { dup /a ge exch /b le and } ll satisfy } @func

    alt{ p q }{ { dup /p exec +not-ok { pop /q exec }{ exch pop } ifelse } ll lazy } @func
    sequence{ p q u }{
      { /p exec +is-ok {
          next x-xs force /q exec +is-ok {
            next x-xs 3 1 roll /u exec exch consok
          }{
            x-xs 3 2 roll ( after ) exch cons exch cons cons
          } ifelse
        } if } ll } @func
    then { {append} sequence }
    xthen { {exch pop} sequence }
    thenx { {pop} sequence }

    combine { dup type /arraytype eq 1 index xcheck not and {
		  1 index type /arraytype eq 2 index xcheck not and {
		      compose
                  }{
		      curry
                  } ifelse
              }{
		  1 index type /arraytype eq 2 index xcheck not and {
		      [ exch ] compose
                  }{
		      cons
                  } ifelse
              } ifelse }

    maybe{ p }{
      { dup /p exec +is-ok { exch pop }{ pop zero exch consok } ifelse } ll } @func
    many{ p }{
      { dup /p exec +is-ok {  % input result
          exch pop next x-xs {  % result input'
            dup force /p exec +is-ok { % result input' result'
              exch pop next x-xs       % result result' input"
              3 1 roll combine exch    % [result result'] input"
            }{  % result input' result'
              pop exit
            } ifelse
          } loop
        }{  % input result
          pop zero exch
        } ifelse
        consok
      } ll } @func
    some { dup many then }

    char { literal }
    str { dup length 0 eq { pop zero succeed }{ dup head literal exch rest str then } ifelse }
    anyof { {within} curry satisfy }
    noneof { {within not} curry satisfy }
    item { {pop true} satisfy }
    into{ p v q }{ ({ //p exec +is-ok {
                        next xs-x <<exch //v exch>>begin force //q exec end 
                      } if }) cvx exec } @func
    within { exch search { pop pop pop true }{ pop false } ifelse }
    none{ p }{
      { dup /p exec +is-ok { pop [ /p ( succeeded) ] fail }{ pop item } ifelse exec } ll
    } @func

    clean { { dup zero eq { pop } if } map }
    flatten { [ exch { dup zero eq { pop exit } if
                       dup type /arraytype eq { x-xs }{ exit } ifelse } loop ] }
    open { dup type /arraytype eq 1 index xcheck not and { /open load forall } if }
    unwrap { [ exch /open load forall ] }
    to-char { 1 string dup 0 4 3 roll put }
    to-string {
      dup length string 0 % a s i
      3 2 roll { % s i a[i]
	  0 get 3 copy put pop 1 add
      } forall pop
    }
    list { [[]] compose { cons } rreduce }

    force { dup zero ne 1 index xcheck and { exec force } if }
    forcex { force dup zero ne { dup first xcheck { dup 0 {force} update } if } if }
    forcexs { force dup zero ne { dup second xcheck { dup 1 {force} update } if } if }
    drop{ {next}repeat } %{ n }{ n 0 gt {next n 1 sub drop} if } @func
    take{ x n }{ n 0 eq { zero }{
                   /x load forcex forcexs  dup zero ne { x-xs*  n 1 sub take  cons } if
                 } ifelse } @func
    next { forcexs second }  % force and update cdr
    update { 3 copy pop get exch exec put }  % a i p    a[i]=p(a[i])

    x-xs* { dup first exch second }
    x-xs  1 @index @lazy
    xs-x* { dup second exch first }
    xs-x  1 @index @lazy

    append { 1 index zero eq { exch pop }{
		 dup zero eq { pop }{
             1 index type /arraytype eq {
		 dup type /arraytype eq { compose }{ one compose } ifelse
               %1 index second zero eq { exch first exch cons }
               %                       { exch x-xs 3 2 roll append cons } ifelse
             }{ dup type /arraytype eq { curry }{ cons } ifelse } ifelse } ifelse } ifelse }
    consok { cons /OK exch cons }
    +is-ok { dup first /OK eq }
    +not-ok { dup first /OK ne }
    head { 0 1 getinterval }
    middle { 1 1 index length 2 sub getinterval }
    cons { 2 aa }
    aa { array astore }
    second { 1 get }
    zero { [] }
    one { zero cons }
    ll { {load-if-literal-name} deep-map }
    deep-map { 1 index type /arraytype ne { exec }{ 1 index xcheck 3 1 roll  [ 3 1 roll
      /deep-map cvx 2 array astore cvx forall ]  exch {cvx} if } ifelse }
    ps { (stack:)= pstack (:stack)= flush }
    pe { (estack:)= countexecstack array execstack {==} forall (:estack)= flush }
    pc { ps clear }
    pq { ps quit }
} pairs-begin

%quit
/debug-pc where {pop}{currentfile flushfile} ifelse

{
0 0 (abcd\ne) string-input
dup ==
9 take ==
0 0 (abcd\ne) string-input
dup 2 drop ==
==
0 0 (abcd\ne) string-input
x-xs ps
force ps
x-xs ps
x-xs ps
force ps
} pop


{
0 0 (abcd\ne) string-input
{ pop true } satisfy exec pc

0 0 () string-input
{ pop true } satisfy %ps
exec pc

0 0 (abcd\ne) string-input
(a) literal exec  pc

0 0 (abcd\ne) string-input
(a) literal
(b) literal then exec  pc

0 0 (abcd\ne) string-input
(a) literal
(c) literal then exec  pc
} pop

{
0 0 (abcd\ne) string-input
(abc) str exec
report
pc

0 0 (abcd\ne) string-input
(abd) str
(abc) str alt exec
report
pc

0 0 (abed\ne) string-input
(a)(c) range
(a)(c) range then
exec
report
pq
} pop

0 0 ("abc") string-input (") char 
exec report pc

0 0 ("abc") string-input (") char (a)(z)range many then (") char then
exec report pc

0 0 ("abc") string-input (") char (a)(z)range some xthen (") char thenx
exec report pq
