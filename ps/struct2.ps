%!
% struct2.ps   An enhanced PostScript syntax for defining functions with named,
% type-checked arguments. Using @func within a block or other construct that uses
% 'pairs' accomplishes a sort of compile-time macro expansion of the shorthand function description.
<<  /pairs-begin { pairs begin        }
    /pairs-def   { pairs {def} forall } pop { pairs currentdict copy pop }
    /pairs       { << exch explode >> }
    /explode     { { @exec } forall   }
    /@exec       { dup type /nametype eq 1 index xcheck and { exec-if-@ } if }
    /exec-if-@   { dup dup length string cvs dup first (@) first eq { exec@ }{ pop } ifelse }
    /first       { 0 get }            /exec@ {  exch pop rest cvn cvx exec  }
    /rest        { 1 1 index length 1 sub getinterval }
>> begin {
    block { pairs-begin main end }
    func  { 1 index type /stringtype eq { typed-func }{ simple-func } ifelse }
    simple-func { func-begin { end } compose }
    typed-func  { exch args-and-types reverse { make-type-name } map check-stack 3 1 roll
		  exch simple-func   compose }
    func-begin  { exch reverse /args-begin load curry exch compose }
    args-begin  { dup length dict begin { exch def } forall }
    args-and-types { /was_x false def [ exch { each-specifier } fortokens fix-last ] dup args exch types  }
    each-specifier { dup xcheck /is_x exch def  is_x was_x and { null exch } if  /was_x is_x def }
    fix-last       { counttomark 2 mod 1 eq { null } if }
    check-stack    { {pop} 4 index cvlit { cvx /stackunderflow signalerror } curry compose
		     /if cvx 2 array astore cvx {check-count} exch compose curry
		     3 index cvlit { cvx /typecheck signalerror } curry
		     /if cvx 2 array astore cvx {check-types} exch compose compose }
    check-count { dup length count 2 sub gt }
    check-types { dup length 1 add copy true exch { check-type and } forall exch pop not }
    check-type  { dup null eq { 3 -1 roll pop pop true }{ 3 -1 roll type eq } ifelse }
    make-type-name { dup type /nametype eq { dup length 4 add string dup dup 4 2 roll cvs
		     2 copy 0 exch putinterval length (type) putinterval cvn } if }
    args    { [ exch 2 { 0 get } fortuple ] cvx }
    types   { [ exch 2 { 1 get } fortuple ] }
    map     { 1 index xcheck 3 1 roll  [ 3 1 roll forall ]  exch {cvx} if }
    reduce  { exch dup first exch rest 3 -1 roll forall }
    rreduce { exch aload length 1 sub dup 3 add -1 roll repeat }
    curry   { [ 3 1 roll {} forall ] cvx } @pop
    {   dup xcheck 3 1 roll
	dup length 1 add array dup 0 5 -1 roll put dup 1 4 -1 roll putinterval
	exch {cvx}if }
    compose { 2 array astore cvx { {} forall } map } @pop
    {   1 index xcheck 3 1 roll
	1 index length 1 index length add array  dup 0 4 index putinterval
	dup 4 -1 roll length 4 -1 roll putinterval
	exch {cvx} if }
    reverse {
	dup xcheck exch
	[ exch dup length 1 sub -1 0 { 2 copy get 3 1 roll pop } for pop ]
        exch {cvx} if }
} pairs-def {
    fortokens {src proc}{ { src token {exch /src exch store}{exit}ifelse  proc } loop } @func
    fortuple {a n p}{ 0 n /a load length 1 sub
	{ /a exch /n getinterval /p exec } {load-if-literal-name} map end for
    } @func-begin
    load-if-literal-name { dup type /nametype eq 1 index xcheck not and { load } if }
} pairs-def

/debug where{pop}{currentfile flushfile}ifelse
{
    main {
	var ==
	[ 1 2 3 4 5 ] { - } rreduce ==
	/ =
	3 4 5 f ==
	3 4 5 f' ==
	3 4 5 f'' ==
	/ =
	3 4 5.0 g =
	3 4 5.0 g' =
	{ 3 4 5 g = } stopped { $error /errorname get =only ( in ) print $error /command get = } if
	/ =
	clear
	{ 3 4 h  = } stopped { $error /errorname get =only ( in ) print $error /command get = } if
	clear
	3 4 5 h =
	{ 3.0 4.0 5.0 h = } stopped { $error /errorname get =only ( in ) print $error /command get = } if
	{ 3.0 4.0 5.0 h' = } stopped { $error /errorname get =only ( in ) print $error /command get = } if
    }

    - sub + add * mul    %:= {exch def}    += {dup load 3 -1 roll + store}
    var 2 3 @add
    
    f  {x y z}{ x  y z +  *      } @func
    f' {x y z}{ x  y z +  *  end } @func-begin
    f'' { {z y x}args-begin  x y z + *  end }
    
    g(x/integer y/integer z/real){ x y z + * } @func
    g' {
	[/realtype/integertype/integertype]
	check-count { pop /g cvx /stackunderflow signalerror } if
	check-types { /g cvx /typecheck signalerror } if
	
	{z y x}args-begin  x y z + *  end
    }
    
    h(x y z){ x y z + * } @func %@dup @==
    h' {
	[null null null]
	check-count { pop /h cvx /stackunderflow signalerror } if
	check-types { /h cvx /typecheck signalerror } if

	{z y x}args-begin  x y z + *  end
    }

} block
