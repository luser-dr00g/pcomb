%errordict/typecheck{ps pe quit}put
%errordict/stackunderflow{pe quit}put
%errordict/stackunderflow{pq}put
%errordict/undefined{pq}put
%(../../debug.ps/db5.ps) run
(pc11a.ps)run {
    ? { {maybe} compose }
    + { {some} compose }
    * { {many} compose }
} pairs-begin

/Dot        (.) char  {pop {item} one} using  def
/Meta       (*+?) anyof  def
/Character  (*+?.|()) noneof  {first {literal} curry one} using  def
/Expression {-777 exec}  def
/Atom       //Dot
            (\() char //Expression executeonly xthen (\)) char thenx  alt
            //Character  alt  def
/Factor     //Atom /A
            //Meta 	{/A load first exch first load exec one } using
	        maybe 	{dup first zero eq {pop /A load} if } using
            into  def
/Term       //Factor  //Factor many then
                { fix { {then} compose compose } reduce one } using  def
//Expression 0  //Term  (|) char //Term xthen  many  then
                  { fix { {plus} compose compose } reduce one } using  put

/regex { 0 0 3 2 roll string-input //Expression exec +is-ok {
	     second first first
         }{
	     /regex cvx /syntaxerror signalerror
         } ifelse } def

{
  0 0 (abc) string-input pc
  0 0 (ab) string-input //Dot maybe exec pc
  0 0 (ab) string-input //Meta exec pc
  0 0 (*)  string-input //Meta exec pc
  0 0 (ab) string-input //Character maybe exec pc
  0 0 (ab) string-input //Atom maybe exec pc
  0 0 (.)  string-input //Atom maybe exec pc
  %0 0 (a*) string-input //Atom //Meta then ==
  0 0 (a*) string-input //Atom //Meta then exec pc
  0 0 (ab) string-input Factor pc
  0 0 (a*) string-input Factor pc
  0 0 (ab) string-input Term pc
  0 0 (ab|c) string-input Expression pc
} pop
{
  (ab) regex pc
  (ab|c) regex pc
  (.*a(bc)) regex pc
  (*x) regex pc
} exec
{
} pop
quit
