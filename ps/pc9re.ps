%errordict/invalidaccess{ps quit}put
%errordict/unmatchedmark{ps quit}put
%errordict/undefined{countdictstack == pc currentdict{}forall ps quit}put
(pc9.ps)run {
    (*)@first { {many} compose }
    (+)@first { {some} compose }
    (?)@first { {maybe} compose }
    fix { dup [] ne 1 index length 2 ge and { dup second [] eq { first } if } if }
} pairs-begin

/Dot            (.) char          { pop {item} } using  def
/Meta           (*+?) anyof      
def
/Character      (*+?.|()) noneof  { {lit} curry } using  def

/Expression     { -777 exec }  def
/Atom           //Dot
		(\() char //Expression xthen (\)) char thenx  plus
	        //Character                                   plus  def
/Factor         //Atom  /A
		    //Meta     { /A load exch load exec dup /A exch store } using
			maybe  { dup [] eq { pop /A load } if } using
		    into  def
/Term           //Factor  /F
		    //Factor  { /F load exch {seq} compose compose dup /F exch store } using
			many  { dup [] eq { pop /F load } if } using
		    into { fix } using def
//Expression 0  //Term  /T
		    (|) char //Term xthen  { /T load exch {plus} compose compose dup /T exch store } using
 			many   { dup [] eq { pop /T load } if } using
		    into { fix } using put
0 pop			

/regex { string-input //Expression exec
	 dup [] ne { first first dup == exec trim { to-string } using } if } def

/r (a+(b.?)*|cf.*) regex ps def
(/r load == ) px

/t { string-input r dup [] ne { first first } if pc } def
(aa) t
(aaab) t
(abab) t
(cf)   t
(cffg) t
(d)    t
(ddd)  t
(dxxxx)t


quit
