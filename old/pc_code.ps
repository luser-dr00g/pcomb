%!PS-Adobe-3.0
%%Title: pc4.c, pc4.h, pc4_ast.c, pc4_test.c
%%For: U-laptop\Norah
%%Creator: a2ps version 4.14
%%CreationDate: Sat Feb  9 22:22:16 2019
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 5
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <stdio.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <string.h>) p n
() N
(#include) K
( ") p
(pc4.h) str
(") p n
() N
(result parse_fail\( parser p, ) S
(char) k
( *input \);) p n
(result parse_succeed\( parser p, ) S
(char) k
( *input \);) p n
(result parse_term\( parser p, ) S
(char) k
( *input \);) p n
(result parse_any\( parser p, ) S
(char) k
( *input \);) p n
(result parse_alternate\( parser p, ) S
(char) k
( *input \);) p n
(result parse_sequence\( parser p, ) S
(char) k
( *input \);) p n
() N
(result last_result\( result r \);) N
(static) K
( ) p
(void) k
( amend_lengths\( result r, ) p
(int) k
( length \);) p n
(static) K
( result parse_sequence_next\( result r, parser p, ) p
(char) k
( *input \);) p n
() N
() N
() N
(#define) K
( new_function_for_\(type\)                            \\) p n
(  type new_##type \( ) S
(struct) k
( type input \){                   \\) p n
(    type local = calloc\( ) S
(sizeof) K
( *local, 1 \);               \\) p n
(    ) S
(return) K
(  local  ?  \( *local = input \), local  :  local; \\) p n
(  }) N
() N
(Types\( new_function_for_ \)) N
() N
() N
(/* entry point to the parser tree */) c n
(result parse\( parser p, ) p
(char) k
( *input \){) p n
(  ) S
(return) K
(  p->test\( p, input \);) p n
(}) N
() N
() N
() N
(/* handlers for the nodes */) c n
() p n
(/* * leaf nodes */) c n
() p n
(result parse_fail\( parser p, ) S
(char) k
( *input \){) p n
(  ) S
(return) K
(  ) p
(NULL) K
(;) p n
(}) N
() N
(result parse_succeed\( parser p, ) S
(char) k
( *input \){ ) p n
(  ) S
(return) K
(  new_result\( \() p
(struct) k
( result\){ .next = ) p
(NULL) K
(, .length_matched = 0 } \);) p n
(}) N
() N
(result parse_term\( parser p, ) S
(char) k
( *input \){ ) p n
(  ) S
(return) K
(  *input == p->c  ?) p n
(    new_result\( \() S
(struct) k
( result\){ .next = ) p
(NULL) K
(, .length_matched = 1 } \)  :  ) p
(NULL) K
(;) p n
( ) N
(} ) N
() N
(result parse_any\( parser p, ) S
(char) k
( *input \){) p n
(  ) S
(return) K
(  new_result\( \() p
(struct) k
( result\){ .next = ) p
(NULL) K
(, .length_matched = 1 } \);) p n
(}) N
() N
(/* * branch nodes */) c n
(const) K
( ) p
(int) k
( short_circuit_alternate = 1;) p n
() N
(/* append to the results of the left branch) c n
(   the results of the right branch */) N
(result parse_alternate\( parser p, ) p
(char) k
( *input \){ ) p n
(  result r = parse\( p->a, input \); ) N
(  ) S
(if) K
(\(  r  \)) p n
(    ) S
(return) K
(  \(short_circuit_alternate ? 0 : \(last_result\( r \)->next = parse\( p->b) p n
(, input \)\)\),) N
(            r; ) N
(  ) S
(else) K n
(pc4.c) (Page 1/3) (Feb 08, 19 19:10) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    ) p
(return) K
(  parse\( p->b, input \); ) p n
(}) N
() N
(/* call left branch, process any results */) c n
(result parse_sequence\( parser p, ) p
(char) k
( *input \){ ) p n
(  ) S
(return) K
(  parse_sequence_next\( parse\( p->a, input \), p, input \); ) p n
(} ) N
() N
(/* for each result of left branch, offset input by length matched,) c n
(   and try right branch, adding the left length to any results of ) N
(   right branch */) N
(static) K
( result parse_sequence_next\( result ra, parser p, ) p
(char) k
( *input \){ ) p n
(  ) S
(if) K
(\(  ! ra  \)  ) p
(return) K
(  ) p
(NULL) K
(; ) p n
(  result rb = parse\( p->b, input + ra->length_matched \); ) N
(  ) S
(if) K
(\(  rb  \){ ) p n
(    amend_lengths\( rb, ra->length_matched \); ) N
(    ) S
(return) K
(  last_result\( rb \)->next = parse_sequence_next\( ra->next, p, input \),) p n
( rb; ) N
(  } ) S
(else) K
(  ) p
(return) K
(  parse_sequence_next\( ra->next, p, input \); ) p n
(} ) N
() N
() N
(result last_result\( result r \){) N
(  ) S
(return) K
(  r->next  ?  last_result\( r->next \)  :  r;) p n
(}) N
() N
(static) K
( ) p
(void) k
( amend_lengths\( result r, ) p
(int) k
( length \){ ) p n
(  ) S
(if) K
(\(  r  \)  r->length_matched += length; ) p n
(  ) S
(if) K
(\(  r->next  \)  amend_lengths\( r->next, length \); ) p n
(} ) N
() N
() N
(/* constructors */) c n
() p n
(/* *  "axioms" */) c n
(parser fails\(\){     ) p
(return) K
(  new_parser\( \() p
(struct) k
( parser\){ .test = parse_fail    }) p n
( \); }) N
(parser succeeds\(\){  ) S
(return) K
(  new_parser\( \() p
(struct) k
( parser\){ .test = parse_succeed }) p n
( \); }) N
() N
(parser term\( ) S
(int) k
( c \){) p n
(  ) S
(return) K
(  new_parser\( \() p
(struct) k
( parser\){ .test = parse_term, .c = c } \);) p n
(}) N
() N
(parser any\(\){) N
(  ) S
(return) K
(  new_parser\( \() p
(struct) k
( parser\){ .test = parse_any } \);) p n
(}) N
() N
(parser alternate\( parser a, parser b \){) N
(  ) S
(return) K
(  new_parser\( \() p
(struct) k
( parser\){ .test = parse_alternate, .a = a, .b = b }) p n
( \);) N
(}) N
() N
(parser sequence\( parser a, parser b \){) N
(  ) S
(return) K
(  new_parser\( \() p
(struct) k
( parser\){ .test = parse_sequence, .a = a, .b = b } ) p n
(\);) N
(}) N
() N
(/* *  "theorems" */) c n
(parser char_class\( ) p
(char) k
( *str \){) p n
(  ) S
(return) K
(  *str  ?  alternate\( term\( *str \), char_class\( str + 1 \) \)  :  fails\(\);) p n
(}) N
() N
(parser string\( ) S
(char) k
( *str \){) p n
(  ) S
(return) K
(  *str  ?  sequence\( term\( *str \), string\( str + 1 \) \)  :  succeeds\(\);) p n
(}) N
() N
(parser maybe\( parser a \){) N
(  ) S
(return) K
(  new_parser\( \() p
(struct) k
( parser\){ .test = parse_alternate, .a = a, .b = suc) p n
(pc4.c) (Page 2/3) (Feb 08, 19 19:10) title
border
grestore
(Printed by U-laptop\\Norah) rhead
(pc4.c) (1/5) (Saturday February 09, 2019) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(ceeds\(\) } \);) p n
(}) N
() N
(parser many\( parser a \){) N
(  parser q = new_parser\( \() S
(struct) k
( parser\){ .test = parse_sequence, .a = a } \);) p n
(  parser r = new_parser\( \() S
(struct) k
( parser\){ .test = parse_alternate, .a = q, .b = ) p n
(succeeds\(\) } \);) N
(  q->b = r;) N
(  ) S
(return) K
( r;) p n
(}) N
() N
(parser some\( parser a \){) N
(  parser q = new_parser\( \() S
(struct) k
( parser\){ .test = parse_sequence, .a = a } \);) p n
(  parser r = new_parser\( \() S
(struct) k
( parser\){ .test = parse_alternate, .a = q, .b = ) p n
(succeeds\(\) } \);) N
(  q->b = r;) N
(  ) S
(return) K
( q;) p n
(}) N
() N
(parser sequencen\( ) S
(int) k
( n, parser *pp \){) p n
(  ) S
(return) K
(  n  ?  sequence\( *pp, sequencen\( n-1, pp+1 \) \)) p n
(    ) S 8 T (     :  succeeds\(\);) N
(}) N
() N
() N
(parser alternaten\( ) S
(int) k
( n, parser *pp \){) p n
(  ) S
(return) K
(  n  ?  alternate\( *pp, alternaten\( n-1, pp+1 \) \)) p n
(    ) S 8 T (     :  fails\(\);) N
(}) N
() N
(//char *strndup\(char*s,size_t n\){char *r = malloc\(n+1\); if \(r\) memcpy\(r,s,n\),r[n) c n
(]=0; return r;}) N
() p n
(result parse_action\( parser p, ) S
(char) k
( *input \){) p n
(  result r = parse\( p->a, input \);) N
(  ) S
(if) K
( \(r\) p->f\( p->payload, strndup\( input, r->length_matched \) \);) p n
(  ) S
(return) K
(  r;) p n
(}) N
() N
(parser action\( parser pa, callback f, ) S
(void) k
( *payload \){) p n
(  ) S
(return) K
(  new_parser\( \() p
(struct) k
( parser\){ .test = parse_action, .a = pa, .f = f, .p) p n
(ayload = payload } \);) N
(}) N
() N
() N
() N
(void) k
( build_dot\( ) p
(void) k
( *p, ) p
(char) k
( *s \){) p n
(  parser *r = p;) N
(  *r = any\(\);) N
(}) N
() N
(void) k
( build_char\( ) p
(void) k
( *p, ) p
(char) k
( *s \){) p n
(  parser *r = p;) N
(  *r = term\( *s \);) N
(}) N
() N
(parser regex\( ) S
(char) k
( *re \){) p n
(  ) S
(static) K
( parser p = ) p
(NULL) K
(;) p n
(  ) S
(static) K
( parser r;) p n
(  ) S
(if) K
(\(  !p  \)) p n
(    p = alternaten\(2, \(parser[]\){) N
() S 8 T (  action\( term\( ') S
(.) str
(' \), build_dot, &r\),) p n
() S 8 T (  action\( any\(\), build_char, &r\)) N
() S 8 T (}\);) N
(  ) S
(return) K
(  parse\( p, re \), r;) p n
(}) N
(pc4.c) (Page 3/3) (Feb 08, 19 19:10) title
border
grestore
(Printed by U-laptop\\Norah) rhead
(pc4.c) (2/5) (Saturday February 09, 2019) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(typedef) K
( ) p
(struct) k
( parser *parser;) p n
(typedef) K
( ) p
(struct) k
( result *result;) p n
(typedef) K
( result \(*handler\)\( parser, ) p
(char) k
( *\);) p n
(typedef) K
( ) p
(void) k
( \(*callback\)\( ) p
(void) k
( *payload, ) p
(char) k
( *match \);) p n
() N
(struct) k
( parser { ) p n
(  handler test; ) N
(  parser a, b; ) N
(  ) S
(int) k
( c; ) p n
(  callback f;) N
(  ) S
(void) k
( *payload;) p n
(}; ) N
() N
(struct) k
( result { ) p n
(  result next; ) N
(  ) S
(int) k
( length_matched; ) p n
(}; ) N
() N
(#define) K
( Types\(_\) \\) p n
(  _\(parser\)      \\) N
(  _\(result\)) N
(#define) K
( new_function_for_\(type\) \\) p n
(  type new_##type \( ) S
(struct) k
( type input \);) p n
(Types\( new_function_for_ \)) N
(#undef) K
( new_function_for_) p n
() N
(// Parsing actions return result lists) c n
(result parse\( parser p, ) p
(char) k
( *input \);) p n
() N
() N
(// Constructors build parsers) c n
(parser fails\(\);) p n
(parser succeeds\(\);) N
(parser term\( ) S
(int) k
( c \);) p n
(parser any\(\);) N
(parser alternate\( parser a, parser b \);) N
(parser sequence\( parser a, parser b \);) N
(parser char_class\( ) S
(char) k
( *str \);) p n
(parser string\( ) S
(char) k
( *str \);) p n
(parser maybe\( parser a \);) N
(parser many\( parser a \);) N
(parser some\( parser a \);) N
(parser sequencen\( ) S
(int) k
( n, parser *pp \);) p n
(parser alternaten\( ) S
(int) k
( n, parser *pp \);) p n
() N
(parser action\( parser a, callback f, ) S
(void) k
( *payload \);) p n
(parser regex\( ) S
(char) k
( *re \);) p n
(pc4.h) (Page 1/1) (Feb 08, 19 19:17) title
border
grestore
(Printed by U-laptop\\Norah) rhead
(pc4.h) (3/5) (Saturday February 09, 2019) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( ") p
(pc4.h) str
(") p n
() N
(parser leaf\( parser \){) N
(}) N
(parser node\( parser \){) N
(}) N
(pc4_ast.c) (Page 1/1) (Feb 06, 19 14:45) title
border
grestore
(Printed by U-laptop\\Norah) rhead
(pc4_ast.c) (4/5) (Saturday February 09, 2019) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(#include) K
( <stdio.h>) p n
(#include) K
( ") p
(pc4.h) str
(") p n
() N
(void) k
( print\( ) p
(void) k
( *p, ) p
(char) k
( *s \){ printf\(") p
(%s\\n) str
(", s\); }) p n
() N
(int) k
( simple_test\(\){) p n
(  parser digit = char_class\( ") S
(0123456789) str
(" \);) p n
(  parser number = some\( digit \);) N
(  parser integer = sequence\( maybe\( char_class\( ") S
(+-) str
(" \) \), number \);) p n
(  parser on_integer = action\( integer, print, ) S
(NULL) K
( \);) p n
() N
(  result r = parse\( on_integer, ") S
(123) str
(" \);) p n
(  printf\( ") S
(%d\\n) str
(", r ? r->length_matched : -1 \);) p n
(}) N
() N
(int) k
( regex_test\(\){) p n
(  parser x = regex\( ") S
(.) str
(" \);) p n
(  result r = parse\( x, ") S
(abc) str
(" \);) p n
(  printf\( ") S
(%d\\n) str
(", r ? r->length_matched : -1 \);) p n
(}) N
() N
(int) k
( my_sscanf\( ) p
(const) K
( ) p
(char) k
( * restrict str, ) p
(const) K
( ) p
(char) k
( *restrict format, ...\){) p n
(  ) S
(static) K
( parser p = ) p
(NULL) K
(;) p n
(  ) S
(if) K
(\(  !p  \) p = 0;) p n
(}) N
() N
(#if) K
( 0) p n
(int) k
( ast_test\(\){) p n
(  parser digit = char_class\( ") S
(0123456789) str
(" \);) p n
(  parser number = some\( digit \);) N
(  parser integer = sequence\( maybe\( char_class\( ") S
(+-) str
(" \) \), number \);) p n
(  parser on_integer = action\( integer, leaf, token \);) N
(}) N
(#endif) K n
() p n
(#if) K
( 0) p n
(parser c_grammar\(\){) N
(  parser constant_expression;) N
(  parser comma;) N
(  parser identifier;) N
(  parser left_brace;) N
(  parser right_brace;) N
(  parser enum_specifier;) N
(  parser typedef_name;) N
(  parser compound_statement;) N
(  parser declaration;) N
(  parser direct_declarator;) S
(/* = alternaten\(5, \(parser[]\){) c n
(      identifier,) N
() S 8 T (sequencen\(3, \(parser[]\){ string\("\("\), declarator, string\("\)"\) }\),) N
() S 8 T (sequencen\(4, \(parser[]\){ direct_declarator, */) N
() p n
(  parser type_qualifier = alternate\( string\(") S
(const) str
("\), string\(") p
(volatile) str
("\) \);) p n
(  parser pointer = sequencen\(3, \(parser[]\){ string\(") S
(*) str
("\), many\( type_qualifier \),) p n
( maybe\( pointer \) }\);) N
(  parser declarator = sequence\( maybe\( pointer \), direct_declarator \);) N
(  parser struct_declarator = alternaten\(3, \(parser[]\){) N
(      declarator,) N
(      sequencen\(3, \(parser[]\){ declarator, string\(") S
(:) str
("\), constant_expression }\),) p n
(      sequence\( string\(") S
(:) str
("\), constant_expression \)) p n
() S 8 T (}\);) N
(  parser struct_declarator_list = sequence\( struct_declarator,) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (    many\( sequence\( comma, struct_declar) N
(ator \) \) \);) N
(  parser type_specifier = alternaten\(12, \(parser[]\){) N
(      string\(") S
(void) str
("\), string\(") p
(char) str
("\), string\(") p
(short) str
("\), string\(") p
(int) str
("\), string\(") p
(long) str
("\),) p n
(      string\(") S
(float) str
("\), string\(") p
(double) str
("\), string\(") p
(signed) str
("\), string\(") p
(unsigned) str
("\),) p n
(      struct_or_union_specifier, enum_specifier, typedef_name) N
() S 8 T (}\);) N
(  parser specifier_qualifier = alternate\( type_specifier, type_qualifier \);) N
(pc4_test.c) (Page 1/2) (Feb 08, 19 19:25) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  parser struct_declaration = sequence\( many\( specifier_qualifier \), struct_decl) p n
(arator_list \);) N
(  parser struct_or_union = alternate\( string\(") S
(struct) str
("\), string\(") p
(union) str
("\) \);) p n
(  parser struct_or_union_specifier = alternaten\(3, \(parser[]\){) N
(      sequencen\(5, \(parser[]\){) N
(          struct_or_union, identifier, left_brace, some\( struct_declaration \), r) N
(ight_brace) N
() S 8 T (  } \),) N
(      sequencen\(4, \(parser[]\){ struct_or_union, left_brace, some\( struct_declara) N
(tion \), right_brace } \),) N
(      sequence\( struct_or_union, identifier \)) N
() S 8 T (}\);) N
(  parser storage_class_specifier = alternaten\(5, \(parser[]\){) N
(      string\(") S
(auto) str
("\), string\(") p
(register) str
("\), string\(") p
(static) str
("\), string\(") p
(extern) str
("\), string\(") p
(typ) str n
(edef) S
("\)) p n
() S 8 T (}\);) N
(  parser declaration_specifier = alternaten\(3, \(parser[]\){) N
(      storage_class_specifier, type_specifier, type_qualifier) N
() S 8 T (}\);) N
(  parser function_definition = sequencen\(4, \(parser[]\){) N
(      many\( declaration_specifier \), declarator, many\( declaration \), compound_s) N
(tatement) N
() S 8 T (}\);) N
(  parser external_declaration = alternate\( function_definition, declaration \);) N
(  parser translation_unit = many\( external_declaration \);) N
(  ) S
(return) K
( translation_unit;) p n
(}) N
(#endif) K n
(  ) p n
() N
(int) k
( main\(\){) p n
(  regex_test\(\);) N
(  ) S
(return) K
( 0;) p n
(}) N
(pc4_test.c) (Page 2/2) (Feb 08, 19 19:25) title
border
grestore
(Printed by U-laptop\\Norah) rhead
(pc4_test.c) (5/5) (Saturday February 09, 2019) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
