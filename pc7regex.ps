(pc7.ps)run

/atom-list [] def
/term-list [] def
/expr-list [] def
/append { [ 3 1 roll exch {} forall counttomark -1 roll ] } def
/last { dup length 1 sub get } def
/butlast { [ exch {} forall pop ] } def
/depend { dup last exch butlast } def

/stash { dup load 3 2 roll append def } def
/fetch { dup load depend exch 3 1 roll def } def

/build-meta { exch cvx exec } def

/meta         (*+?) char-class def
/character    (*+?.|()) char-class inverse def
/meta         //meta { (meta ) print dup = /atom-list fetch build-meta /atom-list stash } action def
/expression   7 array cvx def
/expression { {<</atom-list[]/term-list[]/expr-list[]>>begin} exec
	      //expression exec } def
/atom         <<
		  (.) { (. ) print = any /atom-list stash } action
		  [ (\() //expression (\)) ] { (atom ) print = /expr-list fetch end /atom-list stash } action
		  //character { (char ) print dup = term /atom-list stash } action
		  %[ ([) characterclass (]) ]
	      >> def
/factor       [ //atom //meta ? ] def
/term_        //factor + {(term ) print =
    atom-list dup length 1 gt {sequence}{0 get} ifelse  /term-list stash /atom-list [] def
} action def

[ //term_ [ (|) //term_ ] * ] {(expression ) print =
    term-list dup length 1 gt {alternate}{0 get} ifelse  /expr-list stash /term-list [] def
} action   dup length 7 ne {(ASSERT FAIL! length 7 ne)= quit}if
//expression 2 get copy pop


clear
mark (a(b.)+) expression pc  currentdict end currentdict copy pop
/dpx {dup print cvx exec} def
(atom-list length =) dpx
(term-list length =) dpx
(expr-list length =) dpx

/r expr-list 0 get def
//r 0 get =
((a) r pc ) dpx
((ab) r pc ) dpx
((abx) r pc ) dpx
((abxb) r pc ) dpx
((abxx) r pc ) dpx
((abxbx) r pc ) dpx
((abxabx) r pc ) dpx
((axbxx) r pc ) dpx


quit

